package model.entity;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 27 10:28:00 BDT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxOmFinanceTEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        BuyerId,
        ItemType,
        Price,
        Fromdate,
        Todate,
        CreationDate,
        CreationBy,
        UpdateDate,
        UpdateBy,
        BuyerName,
        Remarks;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int ID = AttributesEnum.Id.index();
    public static final int BUYERID = AttributesEnum.BuyerId.index();
    public static final int ITEMTYPE = AttributesEnum.ItemType.index();
    public static final int PRICE = AttributesEnum.Price.index();
    public static final int FROMDATE = AttributesEnum.Fromdate.index();
    public static final int TODATE = AttributesEnum.Todate.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int CREATIONBY = AttributesEnum.CreationBy.index();
    public static final int UPDATEDATE = AttributesEnum.UpdateDate.index();
    public static final int UPDATEBY = AttributesEnum.UpdateBy.index();
    public static final int BUYERNAME = AttributesEnum.BuyerName.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxOmFinanceTEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entity.XxOmFinanceTEO");
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for BuyerId, using the alias name BuyerId.
     * @return the value of BuyerId
     */
    public BigDecimal getBuyerId() {
        return (BigDecimal) getAttributeInternal(BUYERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BuyerId.
     * @param value value to set the BuyerId
     */
    public void setBuyerId(BigDecimal value) {
        setAttributeInternal(BUYERID, value);
    }

    /**
     * Gets the attribute value for ItemType, using the alias name ItemType.
     * @return the value of ItemType
     */
    public String getItemType() {
        return (String) getAttributeInternal(ITEMTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemType.
     * @param value value to set the ItemType
     */
    public void setItemType(String value) {
        setAttributeInternal(ITEMTYPE, value);
    }

    /**
     * Gets the attribute value for Price, using the alias name Price.
     * @return the value of Price
     */
    public BigDecimal getPrice() {
        return (BigDecimal) getAttributeInternal(PRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Price.
     * @param value value to set the Price
     */
    public void setPrice(BigDecimal value) {
        setAttributeInternal(PRICE, value);
    }

    /**
     * Gets the attribute value for Fromdate, using the alias name Fromdate.
     * @return the value of Fromdate
     */
    public Timestamp getFromdate() {
        return (Timestamp) getAttributeInternal(FROMDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Fromdate.
     * @param value value to set the Fromdate
     */
    public void setFromdate(Timestamp value) {
        setAttributeInternal(FROMDATE, value);
    }

    /**
     * Gets the attribute value for Todate, using the alias name Todate.
     * @return the value of Todate
     */
    public Timestamp getTodate() {
        return (Timestamp) getAttributeInternal(TODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Todate.
     * @param value value to set the Todate
     */
    public void setTodate(Timestamp value) {
        setAttributeInternal(TODATE, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreationDate.
     * @param value value to set the CreationDate
     */
    public void setCreationDate(Timestamp value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for CreationBy, using the alias name CreationBy.
     * @return the value of CreationBy
     */
    public BigDecimal getCreationBy() {
        return (BigDecimal) getAttributeInternal(CREATIONBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreationBy.
     * @param value value to set the CreationBy
     */
    public void setCreationBy(BigDecimal value) {
        setAttributeInternal(CREATIONBY, value);
    }

    /**
     * Gets the attribute value for UpdateDate, using the alias name UpdateDate.
     * @return the value of UpdateDate
     */
    public Timestamp getUpdateDate() {
        return (Timestamp) getAttributeInternal(UPDATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdateDate.
     * @param value value to set the UpdateDate
     */
    public void setUpdateDate(Timestamp value) {
        setAttributeInternal(UPDATEDATE, value);
    }

    /**
     * Gets the attribute value for UpdateBy, using the alias name UpdateBy.
     * @return the value of UpdateBy
     */
    public BigDecimal getUpdateBy() {
        return (BigDecimal) getAttributeInternal(UPDATEBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdateBy.
     * @param value value to set the UpdateBy
     */
    public void setUpdateBy(BigDecimal value) {
        setAttributeInternal(UPDATEBY, value);
    }

    /**
     * Gets the attribute value for BuyerName, using the alias name BuyerName.
     * @return the value of BuyerName
     */
    public String getBuyerName() {
        return (String) getAttributeInternal(BUYERNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for BuyerName.
     * @param value value to set the BuyerName
     */
    public void setBuyerName(String value) {
        setAttributeInternal(BUYERNAME, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the value of Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[] { id });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

